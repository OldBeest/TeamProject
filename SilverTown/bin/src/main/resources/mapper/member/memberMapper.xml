<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.java.dao.MemberDao">
	<!-- 회원 전체 목록 가져오기 -->
	<select id="selectAll" resultType="com.java.dto.MemberDto">
		SELECT * FROM users
	</select>
	    <!-- 회원정보 조회 -->
	<select id="selectOne" resultType="com.java.dto.MemberDto">
		 select * from users where id=#{id}
	</select>
	<!-- 로그인 -->
	<select id="selectSignIn" resultType="com.java.dto.MemberDto">
		SELECT * FROM users WHERE
		id=#{id} AND pw=#{pw}
	</select>
	<select id="findByAutoLoginToken" parameterType="String"
		resultType="com.java.dto.MemberDto">
		SELECT * FROM users WHERE auto_login_token =
		#{autoLoginToken}
	</select>

	<update id="updateAutoLoginToken"
		parameterType="com.java.dto.MemberDto">
		UPDATE users SET auto_login_token = #{autoLoginToken}
		WHERE id = #{id}
	</update>

	<!-- 아이디로 사용자 정보 찾기 -->
	<select id="findByUsername" parameterType="String"
		resultType="com.java.dto.MemberDto">
		SELECT * FROM users WHERE id = #{id}
	</select>

	<!-- 비밀번호 업데이트 -->
	<update id="updatePassword"
		parameterType="com.java.dto.MemberDto">
		UPDATE users SET pw = #{pw} WHERE id = #{id}
	</update>

	<!-- 임시 비밀번호 저장 -->
	<update id="saveTempPassword"
		parameterType="com.java.dto.MemberDto">
		UPDATE users SET temp_pw = #{pw} WHERE id = #{id}
	</update>

	<!-- 임시 비밀번호 가져오기 -->
	<select id="getTempPassword" parameterType="String"
		resultType="String">
		SELECT temp_pw FROM users WHERE id = #{id}
	</select>

	<!-- 회원정보 저장 -->
	<insert id="insertMember">
		insert into users (id, pw, email, name, address,
		phone, gender, birth_date,
		join_date, disease, feature)
		values (#{id},
		#{pw}, #{email}, #{name}, #{address}, #{phone}, #{gender},
		#{birth_date}, sysdate, #{disease}, #{feature})
	</insert>

	<!-- 아이디 중복체크 -->
	<select id="checkDuplicateId" parameterType="String"
		resultType="int">
		select count(*) from users where id = #{id}
	</select>

	  <!-- 회원 탈퇴 -->
	  <delete id="deleteMember">
	  	delete from users where id=#{id}
	  </delete>

	<!-- 회원정보 업데이트 -->
	  <update id="updateMember">
		  update users set email=#{email}, name=#{name},address=#{address},
		  gender=#{gender}, disease=#{disease}, feature=#{feature}
	      where id=#{id}
	  </update>

	<!-- 전체 질환 목록 가져오기 -->
	<select id="selectAllDiseases" resultType="java.lang.String">
		SELECT DISTINCT
		disease FROM users WHERE disease IS NOT NULL
	</select>

	<!-- 전체 특성 목록 가져오기 -->
	<select id="selectAllFeatures" resultType="java.lang.String">
		SELECT DISTINCT
		feature FROM users WHERE feature IS NOT NULL
	</select>

	<!-- 근처 주소, 질병, 특성별 추천 (거리 계산 기반) -->
	<select id="getNearbyFacilities" parameterType="map"
		resultType="com.java.dto.FacilityDto">
		SELECT dbtest.*,
		(POWER(#{yCor} - y_cor, 2) + POWER(#{xCor} - x_cor, 2)) AS distance
		FROM DBTEST dbtest
		WHERE 1=1
		<if test="featureList != null and featureList.size() > 0">
			AND (
			<foreach item="item" collection="featureList"
				separator=" OR ">
				feature LIKE '%' || #{item} || '%'
			</foreach>
			)
		</if>
		<if test="diseaseList != null and diseaseList.size() > 0">
			AND (
			<foreach item="item" collection="diseaseList"
				separator=" OR ">
				disease LIKE '%' || #{item} || '%'
			</foreach>
			)
		</if>
		ORDER BY distance ASC, reg_date DESC
		FETCH FIRST #{limit} ROWS ONLY
	</select>
	
	<!-- 모든 회원 수 가져오기 -->
	<select id="totalCount">
		select count(*) from users
	</select>
	
	<!-- 지역별 회원 수 가져오기 -->
	<select id="regionCount">
		select count(*) from users where address like '%' || #{region} || '%'
	</select>
	
	<!-- 성별로 회원 수 가져오기 -->
	<select id="genderCount">
		select count(*) from users where gender like '%' || #{gender} || '%'
	</select>
	<select id="diseaseCount">
		select count(*) from users where disease like '%' || #{disease} || '%'
	</select>
	<select id="featureCount">
		select count(*) from users where feature like '%' || #{feature} || '%'
	</select>
</mapper>